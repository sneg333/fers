0. Установка Git в Windows

1. Указание имени и почты, настройка окончания строк
   git config -l
   
   git config --global user.name "Kirill Vercetti"
   git config --global user.email "office@kyzima-spb.com"

   Отвержение необратимого преобразования lf<->crlf.
   Полезно, когда специфические бинарники похожие на текстовые файлы.
   git config --global core.safecrlf true

   Конвертация CRLF в LF только при коммитах
   (Linux)
   git config --global core.autocrlf input
   
   Конвертирует CRLF->LF при коммите и обратно LF->CRLF при выгрузке кода из репозитория на файловую систему
   (Windows)
   git config --global core.autocrlf true

2. Создаем проект и репозиторий Git
   git init
   git clone <url>

3. Проверка состояния
   git status

4. Индексация изменений
   git add

5. Коммит (фиксация) изменений
   git commit -m <сообщение>

6. Просмотр истории
   git log

7. Отмена локальных изменений (до индексации)
   git checkout <файл>

8. Отмена проиндексированных изменений (перед коммитом)
   git reset HEAD <файл> => сбрасывает буферную зону к HEAD
   git checkout <...> => reset (по умолчанию) не изменяет рабочий каталог, т.е. содержимое останется прежним

9. Создание ветки
   git branch <имя_ветки>
   git checkout <имя_ветки>
   git checkout <hash>

   git checkout -b <имя_ветки> => short way

10. Слияние веток
   git checkout <имя_ветки1>
   git merge <имя_ветки2>

11. Удаление ветки
   git branch -d <имя_ветки1>

12. Создание тегов (метод) версий
   git tag <имя_метки> => Легковесная метка
   git tag -a <имя_метки> -m <сообщение> => Аннотированные метки

13. Просмотр тегов
   git tag
   git tag -l 'v1.*'
   git show

14. Удаление тега
   git tag -d <имя_метки>

15. Добавить удаленный (общий) репозиторий
   git remote add origin <uri>

16. Отправить изменения в удаленный репозиторий
   git push -u origin <ветка>

17. Получить изменения из удаленного репозитория
   git pull origin <ветка>
   git pull origin <ветка> --allow-unrelated-histories

18. Сравнение коммитов
   git diff HEAD

19. HELP
   git help
   git tag -h

20 клонирование


------------------------------------------
исправление ошибки HEAD detached from 87dc87b
Это может означать, что вы делали какую-то навигацию по истории коммитов, и неправильно вернулись к последнему коммиту.

Исправить эту проблему можно 4-мя командами:

git branch temp
git checkout temp
git branch -f master temp
git checkout master

И, опционально,

git branch -d temp

Что при этом происходит:

1. создаем временную ветку с именем temp, причем в новой ветке будет правильно установлено положение HEAD
2. переключаемся на временную ветку temp
3. в ветке master устанавливается та же позиция HEAD, что и в ветке temp
4. переключиться на ветку master

И опционально:

5. удалить временную ветку
Еще один вариант, короткий

git checkout имяВеткиГдеВыНаходитесь

- эта команда переключит проект в последний коммит текущей ветки. 
Точнее, в состоянии detached head, проект не находится ни в какой ветке. 
git checkout branchname просто переключит проект на последний коммит той ветки, 
которая указана. Это значит, что до появления ошибки нужно знать, в какой ветке ты находишься. 
Для того чтобы посмотреть, где находился, можно воспользовтьася командой:

git reflog

Самый правильный вариант

git checkout HEAD@{1}

-----------------------
ошибка fatal: remote origin already exists.
вместо git remote add origin https://github.com/LongKnight/git-basics.git
пишем  git remote set-url origin https://github.com/LongKnight/git-basics.git